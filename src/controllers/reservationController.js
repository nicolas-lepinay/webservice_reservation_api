const Reservation = require("../models/Reservation");
const Room = require("../models/Room");
const Seance = require("../models/Seance");
const amqp = require("amqplib");

const { v4: uuidv4 } = require('uuid');
const { sendMsgToRabbitMQ } = require('../utils/rabbitmqUtils');

// * CONFIRM A RESERVATION *
module.exports.confirm = async (req, res) => {
    const reservationUid = req.params.uid;
    const userUid = req.user.uid;

    try {
        // Trouver la r√©servation sp√©cifique par UID
        const reservation = await Reservation.findOne({ uid: reservationUid });
        if (!reservation) return res.status(404).json({ error: { message: "R√©servation introuvable." }});
        if (reservation.userUid !== userUid) return res.status(403).json({ error: { message: "Action non-autoris√©e (la r√©servation n'appartient pas √† l'utilisateur connect√©)." }});
        if (reservation.status !== 'open') return res.status(410).json({ error: { message: `Cette r√©servation ne peut plus √™tre confirm√©e (statut actuel : ${reservation.status}).`  }});

        // R√©cup√©rer toutes les r√©servations pour cette s√©ance
        let otherReservations = await Reservation.find({ seanceUid: { $in: reservation.seanceUid } }).select('-_id -__v');

        // 1Ô∏è‚É£ MISE A JOUR DU STATUS DES RESERVATIONS EXPIRED
        // Pr√©parer une liste de promesses pour les mises √† jour de statut
        const updatePromises = [];

        // V√©rifier si la date actuelle est sup√©rieure √† 'expiresAt' pour les r√©servations 'open'
        otherReservations.forEach(reservation => {
            if (reservation.status === 'open' && new Date() > reservation.expiresAt) {
                // Ajouter la promesse de mise √† jour √† la liste
                updatePromises.push(Reservation.updateOne({ uid: reservation.uid }, { status: 'expired' }));
            }
        });

        // Ex√©cuter toutes les mises √† jour en parall√®le
        await Promise.all(updatePromises);

        // Si des mises √† jour ont eu lieu, r√©cup√©rer √† nouveau les r√©servations
        if (updatePromises.length > 0) otherReservations = await Reservation.find({ seanceUid: { $in: reservation.seanceUid } }).select('-_id -__v');

        // 2Ô∏è‚É£ CALCUL DU RANK
        // Filtrer les r√©servations ouvertes
        const openReservations = otherReservations.filter(res => res.status === 'open');

        // Trouver le rang de la position de la r√©servation actuelle
        const rank = getRank(reservation, openReservations);

        if (rank !== 1) return res.status(400).json({ error: { message: `Vous √™tes en ${rank}√®me position dans la file d'attente et ne pouvez pas confirmer la r√©servation actuellement.` }});

        reservation.status = 'confirmed';
        await reservation.save();

        // üì® Envoyer √† Rabbitmq notification de r√©servation
        const msg = {
            email: req.user.email,
            seats: reservation.seats,
        }
        console.log("Sending message to rabbit MQ...");
        sendMsgToRabbitMQ("reservation-queue", msg)

        return res.status(201).json({ message: "R√©servation confirm√©e avec succ√®s." });
        
    } catch(err) {
        return res.status(500).json({ error: { message: `Erreur interne : ${err}` }});
    }
}

// * GET ALL RESERVATIONS *
module.exports.findAll = async (req, res) => {
    try {
        const { movieUid } = req.params;

        // Trouver toutes les s√©ances pour le film donn√©
        const seances = await Seance.find({ movieUid: movieUid });

        // Extraire les UIDs de s√©ances
        const seanceUids = seances.map(seance => seance.uid);

        // R√©cup√©rer toutes les r√©servations
        let reservations = await Reservation.find({ seanceUid: { $in: seanceUids } }).select('-_id -__v');

        // Pr√©parer une liste de promesses pour les mises √† jour de statut
        const updatePromises = [];

        const now = new Date();
        reservations.forEach(reservation => {
            // V√©rifier si la date actuelle est sup√©rieure √† 'expiresAt' pour les r√©servations 'open'
            if (reservation.status === 'open' && now > reservation.expiresAt) {
                updatePromises.push(Reservation.updateOne({ uid: reservation.uid }, { status: 'expired' }));
            }
        });

        // Ex√©cuter toutes les mises √† jour en parall√®le
        await Promise.all(updatePromises);

        // Si des mises √† jour ont eu lieu, r√©cup√©rer √† nouveau les r√©servations
        if (updatePromises.length > 0) reservations = await Reservation.find({ seanceUid: { $in: seanceUids } }).select('-_id -__v');

        // Calcul du rank des r√©servations
        const rankedReservations = reservations.map((reservation, index, array) => {
            let rank = null;
            if (reservation.status === 'open') {
                const openReservations = array.filter(res => res.status === 'open');
                rank = getRank(reservation, openReservations);
            }
            // Exclure la propri√©t√© 'position'
            const { position, ...reservationWithoutPosition } = reservation.toObject();
            return { ...reservationWithoutPosition, rank }; // Retourne l'objet sans la propri√©t√© 'position'
        });
        
        // Retourner les r√©servations avec rank
        return res.status(200).json(rankedReservations);
    } catch (err) {
        return res.status(500).json({ error: { message: `Erreur interne : ${err}` }});
    }
}

// * CREATE A RESERVATION REQUEST *
module.exports.create = async (req, res) => {
    const movieUid = req.params.movieUid; // Inutilis√©
    const seanceUid = req.body.seance;
    const roomUid = req.body.room;
    const nbSeats = req.body.nbSeats;
    const userUid = req.user.uid; // Extrait du middleware d'authentification

    try {
        // Trouver la salle pour obtenir le nombre total de si√®ges
        const room = await Room.findOne({ uid: roomUid });
        if (!room) return res.status(404).json({ error: { message: "Salle de cin√©ma non trouv√©e." }});

        // R√©cup√©rer toutes les r√©servations existantes pour cette s√©ance
        const existingReservations = await Reservation.find({ seanceUid: seanceUid });

        // Calculer le nombre total de si√®ges d√©j√† r√©serv√©s avec un statut 'confirmed'
        const confirmedSeats = existingReservations.reduce((acc, reservation) => {
            return reservation.status === 'confirmed' ? acc + reservation.seats : acc;
        }, 0);

        // V√©rifier la disponibilit√© des si√®ges
        if (room.seats - confirmedSeats < nbSeats) return res.status(400).json({ error: { message: `Le nombre de si√®ges disponibles est insuffisant : ${confirmedSeats} si√®ges disponibles.` }});

        // Trouver la position la plus √©lev√©e parmi les r√©servations ouvertes existantes
        const highestPosition = existingReservations.filter(r => r.status == 'open').reduce((max, reservation) => {
            return reservation.position > max ? reservation.position : max;
        }, 0);

        // D√©terminer la position de la nouvelle r√©servation
        const position = highestPosition + 1;

        // Calculer le rang de la nouvelle r√©servation
        const rank = createRank(existingReservations);

        // Cr√©er une date d'expiration pour la nouvelle r√©servation
        const expiresAt = new Date(Date.now() + 10 * 60000); // Ajoute 10 minutes √† la date actuelle

        // Sauvegarder la nouvelle r√©servation avec le statut 'open'
        const newReservation = new Reservation({
            uid: uuidv4(),
            status: 'open',
            seats: nbSeats,
            seanceUid: seanceUid,
            userUid: userUid,
            expiresAt: expiresAt,
            position: position,
        });

        const savedReservation = await newReservation.save();

        return res.status(201).json({
            uid: savedReservation.uid,
            status: savedReservation.status,
            seats: savedReservation.seats,
            seanceUid: savedReservation.seanceUid,
            userUid: savedReservation.userUid,
            expiresAt: savedReservation.expiresAt,
            rank: rank,
        });

    } catch (err) {
        return res.status(500).json({ error: { message: `Erreur interne : ${err}` }});
    }
}

// * GET ONE RESERVATION *
module.exports.findOne = async (req, res) => {
    try {
        const { uid } = req.params;
        const reservations = await Reservation.find().select('-_id -__v');
        const reservation = reservations.find(r => r.uid === uid);

        // La r√©servation n'existe pas
        if (!reservation) {
            return res.status(404).json({ error: { message: "R√©servation introuvable." }})
        };
        // La r√©servation n'appartient pas √† l'utilisateur et il n'est pas admin 
        if (reservation.userUid !== req.user.uid && !req.user.roles.includes('ROLE_ADMIN')) {
            return res.status(403).json({ error: { message: "Action non-autoris√©e (la r√©servation n'appartient pas √† l'utilisateur connect√©)." }})
        };
        // Le statut de la r√©servation doit √™tre mis √† jour
        if (reservation.status === 'open' && new Date() > reservation.expiresAt) {
            Reservation.updateOne({uid: reservation.uid}, { status: 'expired' });
        }
        const openReservations = reservations.filter(res => res.status === 'open');
        const rank = reservation.status === 'open' ? getRank(reservation, openReservations) : null;

        // Retourner la r√©servation (sans la position mais avec le rank)
        const { position, ...reservationWithoutPosition } = reservation.toObject();
        return res.status(200).json({ ...reservationWithoutPosition, rank });

    } catch (err) {
        return res.status(500).json({ error: { message: `Erreur interne : ${err}` }});
    }
}

function getRank(reservation, otherReservations) {
    // Trier les positions des r√©servations ouvertes par ordre croissant
    const sortedPositions = otherReservations.map(reservation => reservation.position).sort((a, b) => a - b);

    // Trouver le rang de la position de la r√©servation actuelle
    const rank = sortedPositions.indexOf(reservation?.position) + 1; // +1 car les index commencent √† 0

    return rank;
}

function createRank(otherReservations) {
    // Calculer le rang de la nouvelle r√©servation
    const rank = otherReservations.filter(reservation => reservation.status === 'open').length + 1;
    return rank;
}